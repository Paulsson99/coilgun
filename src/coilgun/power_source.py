import numpy as np

from abc import ABC, abstractmethod
from dataclasses import dataclass
from enum import Enum

from .coil import Coil


class PowerSourceEnum(Enum):
	ConstantCurrent = "ConstantCurrent"
	ConstantVoltage = "ConstantVoltage"


class PowerSource(ABC):
	"""Abstract class for a general power sorurce"""

	@abstractmethod
	def current(self, coil: Coil, t: float) -> float:
		"""Return the current generated by the power sorurce at time t"""

	def energy_consumption(self, coil: Coil, t: float, dt: float) -> float:
		"""Calculate the energy consumtion at time t during a time dt"""

class ConstantCurrent(PowerSource):
	"""Class for generating a constant current"""

	def __init__(self, current: float):
		"""
		I: float 	# The constant current supplied by the power source. Measured in Ampere
		"""
		self.I = current


	def current(self, coil: Coil, t: float) -> float:
		return self.I

	def energy_consumption(self, coil: Coil, t: float, dt: float) -> float:
		P = self.I**2 * coil.resistance()
		return P * dt


class ConstantVoltage(PowerSource):
	"""Class for generating a current from a constant voltage"""

	def __init__(self, voltage: float):
		"""
		voltage: float 	# The constant voltage over the power source. Measured in Volt
		"""
		self.voltage = voltage

	def current(self, coil: Coil, t: float) -> float:
		return self.voltage / coil.resistance()

	def energy_consumption(self, coil: Coil, t: float, dt: float) -> float:
		P = self.voltage * self.current(coil)
		return P * dt
